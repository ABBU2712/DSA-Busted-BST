#Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST.

class Solution:
    def deleteNode(self, root: TreeNode, key: int) -> TreeNode:
        if not root:
            return None
        if root.val == key:
            if not root.left and not root.right:
                return None
        
            if not root.left and root.right:
                return root.right
        
            if  root.left and not root.right:
                return root.left
        
            if root.left and root.right:
                pointer = root.right
                while pointer.left:
                    pointer = pointer.left

                root.val = pointer.val
                root.right = self.deleteNode(root.right, root.val)
       
    
    
        elif root.val > key:
            root.left = self.deleteNode(root.left, key)
        else:
            root.right = self.deleteNode(root.right, key)
        
        return root 
